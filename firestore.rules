rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {

      // Required for collection group queries
      match /reviews/{reviewId} {
        allow read;
      }

      match /users/{userId} {
        allow read;
        allow create, update: if isValidUser(userId);
      }

      match /usernames/{username} {
        allow read;
        allow create: if isValidUsername(username);
      }

      match /users/{userId}/reviews/{reviewId} {
        allow read;
        allow create, update: if canCreateOrUpdateReview(userId); 
        allow delete: if request.auth.uid == userId;
      }

      // Users
      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
        let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));

        return isOwner && createdValidUsername;
      }

      function isValidUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;

        return isOwner && isValidLength && isValidUserDoc;     
      }

      // Reviews
      function canCreateOrUpdateReview(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.lastEdit;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.author;

        return isOwner && isNow && usernameMatches;
      }
    }
  }
}